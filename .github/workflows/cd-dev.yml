name: Deploy

on:
  push:
    branches:
      - dev
      - e2e
      - main
  workflow_call:

jobs:
  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Echo stuff
        run: |
          echo "Workload Identity Account ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"
          echo vars.WORKLOAD_IDENTITY_PROVIDER
          echo "Service Account ${{ vars.SERVICE_ACCOUNT }}"
          echo vars.SERVICE_ACCOUNT
      
      - name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      
      - name: "Deploy Registry"
        run: |
          gcloud builds submit --config=cloudbuild.ci-dev.yml .

      - name: "Deploy Cloud Run"
        uses: 'google-github-actions/deploy-cloudrun@v0'
        with:
          service: 'stall-one'
          image: ${{ vars.CONTAINER_REPOSITORY }}
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check Out Repo 
  #       uses: actions/checkout@v2

  #     - name: Create env
  #       run: |
  #         cd tests
  #         mkdir config
  #         cd config
  #         touch .env
  #         echo PORT=${{ secrets.PORT }} >> .env
  #         echo MONGOOSE_URL=${{ secrets.DOCKER_MONGOOSE_URL }} >> .env
  #         echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
  #         echo ULTMT_API_URL=${{ secrets.ULTMT_API_URL }} >> .env
  #         echo API_KEY=${{ secrets.API_KEY }}
  #         echo REDIS_URL=${{ secrets.REDIS_URL }}
  #         cd ..
      
  #     - name: Run Docker CI container
  #       run: docker compose -f docker-compose.dev.yml up -d --build
        
  #     - name: Add dependencies
  #       run: yarn install

  #     - name: Run tests
  #       run: yarn test
      
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v1

  #     - name: Stop containers
  #       if: always()
  #       run: docker compose -f docker-compose.dev.yml down

  

